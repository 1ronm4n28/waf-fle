#!/bin/bash
#
# mlod2waffle	Run mlog2waffle, pushing modsecurity logs to WAF-FLE
#
# chkconfig: 2345 55 25
# description: mlog2waffle push modsecurity logs to WAF-FLE, reading the index 
#              file created by modsecurity (running inside Apache) in real time. 
#              A config file is required: /etc/mlog2waffe.conf
#
# processname: mlog2waffle
# config: /etc/mlog2waffe.conf
# pidfile: /var/run/mlog2waffle.pid

### BEGIN INIT INFO
# Provides: mlod2waffle
# Required-Start: $local_fs $network 
# Required-Stop: $local_fs 
# Should-Stop: $network 
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Run mlog2waffle, pushing modsecurity logs to WAF-FLE
# Description: mlog2waffle push modsecurity logs to WAF-FLE, reading the index
#              file created by modsecurity (running inside Apache) in real time. 
#              A config file is required: /etc/mlog2waffe.conf
### END INIT INFO

# source function library
. /etc/rc.d/init.d/functions

RETVAL=0
prog="mlog2waffle"
lockfile=/var/lock/subsys/$prog

# Some functions to make the below more readable
MLOG2WAFFLE=/usr/sbin/mlog2waffle
PID_FILE=/var/run/$prog.pid
OPTIONS="--daemon"

runlevel=$(set -- $(runlevel); eval "echo \$$#" )

start()
{
	[ -x $MLOG2WAFFLE ] || exit 5
	if [ ! -f /etc/mlog2waffle.conf ] ; then
        echo "Config file not found, check /etc/mlog2waffle.conf"
        exit 2
    fi

	echo $"Starting $prog... "
	#$MLOG2WAFFLE $OPTIONS && success || failure $"$prog stop"
	daemon $MLOG2WAFFLE $OPTIONS
	RETVAL=$?
	[ $RETVAL -eq 0 ] && touch $lockfile
	echo
	return $RETVAL
}

stop()
{
	echo -n $"Stopping $prog: "
	if [ -n "`pidfileofproc $MLOG2WAFFLE`" ] ; then
	    killproc $MLOG2WAFFLE
	else
	    failure $"Stopping $prog"
	fi
	RETVAL=$?
	# if we are in halt or reboot runlevel kill all running sessions
	# so the TCP connections are closed cleanly
	if [ "x$runlevel" = x0 -o "x$runlevel" = x6 ] ; then
	    trap '' TERM
	    killall $prog 2>/dev/null
	    trap TERM
	fi
	[ $RETVAL -eq 0 ] && rm -f $lockfile
	echo
}

restart() {
	stop
	start
}

force_reload() {
	restart
}

rh_status() {
	status -p $PID_FILE mlog2waffle daemon
}

rh_status_q() {
	rh_status >/dev/null 2>&1
}

case "$1" in
	start)
		rh_status_q && rh_status && exit 0
		start
		;;
	stop)
		if ! rh_status_q; then
			rm -f $lockfile
			exit 0
		fi
		stop
		;;
	restart)
		restart
		;;
	force-reload)
		force_reload
		;;
	status)
		rh_status
		RETVAL=$?
		if [ $RETVAL -eq 3 -a -f $lockfile ] ; then
			RETVAL=2
		fi
		;;
	*)
		echo $"Usage: $0 {start|stop|restart|status}"
		RETVAL=2
esac
exit $RETVAL
